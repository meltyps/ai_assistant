from add_files.sqlTable import engine, Task, Complited
from datetime import datetime
from sqlalchemy import and_
from sqlalchemy.orm import sessionmaker
from sqlalchemy import inspect
from add_files.analyze import CommandAnalyzer as cmanls
from add_files.local_database.intents import task_intents

class Function:
    def __init__(self, user_text):
        self.user_text = user_text

    def output(self):
        type_of_info = cmanls(self.user_text).analyze()
        Session = sessionmaker(bind=engine)

        if type_of_info == "show_tasks":
            with Session() as session:
                tasks = session.query(Task.id, Task.title, Task.description, Task.is_completed, Task.due_date, Task.category, Task.priority).all()

                if not tasks:
                    print("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
                else:
                    for id_, title, description, is_completed, due_date, category, priority in tasks: 
                        status = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" if is_completed else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                        print(f"\nüîπ ID: {id_}\nüìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüìÖ –î–µ–¥–ª–∞–π–Ω: {due_date}\nüè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\nüìç –°—Ç–∞—Ç—É—Å: {status}\n")
        
        elif type_of_info == "add_task":
            user_title = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞: ").strip()
            user_description = input("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ").strip()
            
            while True:
                user_due_date = input("–î–µ–¥–ª–∞–π–Ω (—Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î): ").strip()
                try:
                    due_date_obj = datetime.strptime(user_due_date, "%Y-%m-%d")
                    break
                except ValueError:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            while True:
                user_priority = input("–£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–û—Ç 1 –¥–æ 3): ").strip()
                if user_priority.isdigit() and 1 <= int(user_priority) <= 3:
                    user_priority = int(user_priority)
                    break
                else:
                    print("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            user_category = input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ").strip()

            new_task = Task(
                title = user_title,
                description = user_description,
                due_date = due_date_obj,
                priority = user_priority,
                category = user_category
            )

            user_answer = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É? ").lower()
            agree = user_answer in task_intents["confirmation"]

            if agree:
                with Session() as session:
                    session.add(new_task)
                    session.commit()
                print("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            else:
                print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

        elif type_of_info == "task_done":
            morph_data = cmanls(self.user_text).morph_analyze()
            morph_count = len(morph_data)

            print(morph_data)
            print(morph_count)
            print(morph_count//3)
            if morph_count//3 == 1:
                with Session() as session:
                    morph_title = morph_data[0]
                    tasks = session.query(Task.id, Task.title, Task.description, Task.is_completed, Task.due_date, Task.category, Task.priority,  Task.created_at,).all()
                    for id_, title_, description_, is_completed_, due_date_, category_, priority_, created_at_ in tasks:
                        if morph_title == title_:
                            print("\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∞ —Å–Ω–∏–∑—É?")
                            status = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" if is_completed_ else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                            print(f"\nüîπ ID: {id_}\nüìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title_}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description_}\nüìÖ –î–µ–¥–ª–∞–π–Ω: {due_date_}\nüè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_}\n‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_}\nüìç –°—Ç–∞—Ç—É—Å: {status}\n")
                            
                            user_answer = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É? ").lower()
                            agree = user_answer in task_intents["confirmation"]
                            
                            if agree:
                                new_task_data = Complited(
                                    id = id_,
                                    title = title_,
                                    description = description_,
                                    created_at = created_at_,
                                    due_date = due_date_,
                                    is_completed = True,
                                    priority = priority_,
                                    category = category_
                                )

                                session.add(new_task_data)
                                session.commit()

                            
                           
                
            


Function(input("Enter the text: ")).output()